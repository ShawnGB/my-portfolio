import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/i18next-react/dist/i18next-react.js
var import_react = __toESM(require_react());
var I18NextReactContext = (0, import_react.createContext)(null);
var inServer = typeof window === "undefined";
var I18NextReactProvider = (props) => {
  const mounted = useMounted();
  const [internal, setInternal] = (0, import_react.useState)(() => {
    const instance = props.factory(inServer, props.lang);
    const ret = {
      instance,
      lng: instance.language,
      _onLanguageChanged(lang) {
        mounted.current && setInternal((prevInstance) => ({ ...prevInstance, lang }));
      }
    };
    if (!inServer) {
      instance.on("languageChanged", ret._onLanguageChanged);
    }
    return ret;
  });
  (0, import_react.useEffect)(() => {
    if (props.lang) {
      internal.instance.changeLanguage(props.lang);
    }
  }, [props.lang]);
  (0, import_react.useEffect)(() => () => internal.instance.off("languageChanged", internal._onLanguageChanged), []);
  return (0, import_react.createElement)(I18NextReactContext.Provider, { value: internal }, props.children);
};
function useI18n() {
  return (0, import_react.useContext)(I18NextReactContext).instance;
}
function useI18nLoaded(lng, ns) {
  const i18n = useI18n();
  const [resLoad, setResLoadCount] = (0, import_react.useState)(0);
  (0, import_react.useEffect)(() => {
    const triggerResourceCheck = () => setResLoadCount((_) => 1 + _);
    i18n.on("loaded", triggerResourceCheck);
    i18n.store.on("added", triggerResourceCheck);
    i18n.store.on("removed", triggerResourceCheck);
    return () => {
      i18n.off("loaded", triggerResourceCheck);
      i18n.store.off("added", triggerResourceCheck);
      i18n.store.off("removed", triggerResourceCheck);
    };
  }, [i18n]);
  return (0, import_react.useMemo)(() => i18n.hasResourceBundle(lng || "", ns || "") ? i18n.getFixedT(lng, ns) : null, [i18n, lng, ns, resLoad]);
}
function useMounted() {
  const mounted = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(() => {
    mounted.current = true;
    return () => {
      mounted.current = false;
    };
  }, []);
  return mounted;
}
export {
  I18NextReactProvider,
  useI18n,
  useI18nLoaded,
  useMounted
};
//# sourceMappingURL=i18next-react.js.map
